#include<bits/stdc++.h>

using namespace std;

int main(){
	freopen("input.txt", "r", stdin);
	freopen("out.txt", "w", stdout);

	/*
		F(n, m, k, 0):
			if s[n] = t[m] max(F(n-1, m-1, k, 1) + 1, F(n-1, m, k, 0), F(n, m-1, k, 0))
			else max(F(n-1, m, k, 0), F(n, m-1, k, 0))

		F(n, m, k, 1):
			if s[n] = t[m] max(F(n-1, m-1, k, 1) + 1, F(n, m, k-1, 0))
			else F(n, m, k-1, 0)

		Base cases:
		F(n, m, 0, flag) = 0, F(0, m, 1, 1) = F(n, 0, 1, 1) = 0
		Initialize: F(n, m, k, flag) = INT_MIN
	*/

	int n,m,K;
	cin>>n>>m>>K;

	string s, t;
	cin>>s;
	cin>>t;

	s = "#" + s;
	t = "@" + t;

	int dp[n+1][m+1][K+1][2];

	for(int i=0; i<=n; i++){
		for(int j=0; j<=m; j++){
			for(int k=0; k<=K; k++){
				for(int flag=0; flag<2; flag++){
					dp[i][j][k][flag] = INT_MIN;

					if(k == 0) dp[i][j][k][flag] = 0;

					if(i == 0 or j == 0){
						if(k == 1 and flag == 1) dp[i][j][k][flag] = 0;
					}
				}
			}
		}
	}

	for(int i=1; i<=n; i++){
		for(int j=1; j<=m; j++){
			for(int k=1; k<=K; k++){
				if(s[i] == t[j]){
					dp[i][j][k][0] = max(dp[i-1][j-1][k][1] + 1, max(dp[i-1][j][k][0], dp[i][j-1][k][0]));
					dp[i][j][k][1] = max(dp[i-1][j-1][k][1] + 1, dp[i][j][k-1][0]);
				} else{
					dp[i][j][k][0] = max(dp[i-1][j][k][0], dp[i][j-1][k][0]);
					dp[i][j][k][1] = dp[i][j][k-1][0];
				}				
			}
		}
	}

	cout<<max(dp[n][m][K][0], dp[n][m][K][1]);
	

	return 0;
}